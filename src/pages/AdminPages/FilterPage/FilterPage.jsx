import React, { useState, useEffect } from "react";
import axios from "axios";

const FilterPage = () => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [successMsg, setSuccessMsg] = useState("");
    const [filtering, setFiltering] = useState(false);

    // Th√™m state cho snapshot
    const [snapshotOption, setSnapshotOption] = useState({
        enabled: true, // M·∫∑c ƒë·ªãnh t·∫°o snapshot
        notes: "",
        currentYear: null,
    });

    useEffect(() => {
        fetchCurrentYear();
    }, []);

    const fetchCurrentYear = async () => {
        try {
            const token = localStorage.getItem("token");
            // S·ª≠ d·ª•ng route m·ªõi
            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/wish/years`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            const activeYear = response.data.data?.find((year) => year.status === "active");
            if (activeYear) {
                setSnapshotOption((prev) => ({
                    ...prev,
                    currentYear: activeYear,
                    notes: `Th·ªëng k√™ nƒÉm ${activeYear.yearName} - ${new Date().toLocaleDateString("vi-VN")}`,
                }));
            }
        } catch (error) {
            console.error("Error fetching current year:", error);
            // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c nƒÉm, v·∫´n ƒë·ªÉ m·∫∑c ƒë·ªãnh
            setSnapshotOption((prev) => ({
                ...prev,
                notes: `Th·ªëng k√™ l·ªçc tr√∫ng tuy·ªÉn - ${new Date().toLocaleDateString("vi-VN")}`,
            }));
        }
    };

    // H√†m x·ª≠ l√Ω l·ªçc nguy·ªán v·ªçng V√Ä t·∫°o snapshot
    const handleFilter = async () => {
        setFiltering(true);
        setError(null);
        setSuccessMsg("");

        try {
            const token = localStorage.getItem("token");

            // 1. Th·ª±c hi·ªán l·ªçc tr√∫ng tuy·ªÉn
            const filterResponse = await axios.put(
                `${process.env.REACT_APP_API_BASE_URL}/wish/filter`,
                {},
                {
                    headers: token ? { Authorization: `Bearer ${token}` } : {},
                }
            );

            let snapshotMessage = "";

            // 2. T·∫°o snapshot n·∫øu ƒë∆∞·ª£c b·∫≠t
            if (snapshotOption.enabled) {
                try {
                    const snapshotResponse = await axios.post(
                        `${process.env.REACT_APP_API_BASE_URL}/snapshots/create-yearly`,
                        {
                            yearId: snapshotOption.currentYear?.yearId,
                            notes: snapshotOption.notes,
                            snapshotType: "yearly_summary",
                        },
                        {
                            headers: { Authorization: `Bearer ${token}` },
                        }
                    );

                    snapshotMessage = `\nüìä ƒê√£ t·∫°o snapshot th·ªëng k√™`;
                } catch (snapshotError) {
                    console.error("Snapshot creation failed:", snapshotError);
                    snapshotMessage = "\n‚ö†Ô∏è L·ªçc th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ t·∫°o snapshot th·ªëng k√™.";
                }
            }

            setSuccessMsg(`‚úÖ L·ªçc th√†nh c√¥ng! Danh s√°ch tr√∫ng tuy·ªÉn ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.${snapshotMessage}`);
        } catch (err) {
            console.error("Filter error:", err);
            setError("‚ùå L·ªói khi l·ªçc nguy·ªán v·ªçng.");
        } finally {
            setFiltering(false);
        }
    };

    return (
        <div className="max-w-4xl mx-auto p-6">
            <h1 className="text-3xl font-bold text-blue-700 text-center mb-8">üéØ L·ªçc Danh S√°ch Tr√∫ng Tuy·ªÉn</h1>

            {/* Current Year Info */}
            {snapshotOption.currentYear && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                    <h3 className="text-lg font-semibold text-blue-800 mb-2">üìÖ NƒÉm tuy·ªÉn sinh hi·ªán t·∫°i</h3>
                    <p className="text-blue-700">
                        <strong>{snapshotOption.currentYear.yearName}</strong> (ID: {snapshotOption.currentYear.yearId})
                    </p>
                </div>
            )}

            {/* Snapshot Options */}
            <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                <h3 className="text-lg font-semibold mb-4 text-gray-800">üìä T√πy ch·ªçn th·ªëng k√™ so s√°nh nƒÉm</h3>

                <div className="space-y-4">
                    <label className="flex items-center">
                        <input
                            type="checkbox"
                            checked={snapshotOption.enabled}
                            onChange={(e) =>
                                setSnapshotOption((prev) => ({
                                    ...prev,
                                    enabled: e.target.checked,
                                }))
                            }
                            className="mr-3 h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
                        />
                        <span className="text-sm font-medium text-gray-700">T·ª± ƒë·ªông t·∫°o snapshot th·ªëng k√™ khi l·ªçc</span>
                    </label>

                    <div className="text-sm text-gray-600 ml-7 bg-gray-50 p-3 rounded">
                        <p className="font-medium mb-1">üìå Snapshot s·∫Ω l∆∞u th√¥ng tin:</p>
                        <ul className="list-disc list-inside space-y-1 text-xs">
                            <li>T·ªïng s·ªë sinh vi√™n ƒëƒÉng k√Ω trong nƒÉm</li>
                            <li>S·ªë l∆∞·ª£ng ƒëƒÉng k√Ω theo t·ª´ng ng√†nh</li>
                            <li>S·ªë l∆∞·ª£ng ƒëƒÉng k√Ω theo t·ª´ng di·ªán x√©t tuy·ªÉn</li>
                            <li>Chi ti·∫øt c√°c ng√†nh v√† di·ªán ƒëang m·ªü</li>
                            <li>Th·ªëng k√™ tr√∫ng tuy·ªÉn sau khi l·ªçc</li>
                        </ul>
                        <p className="mt-2 text-blue-600 font-medium">
                            üëâ D·ªØ li·ªáu n√†y s·∫Ω d√πng ƒë·ªÉ so s√°nh v·ªõi c√°c nƒÉm kh√°c
                        </p>
                    </div>

                    {snapshotOption.enabled && (
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Ghi ch√∫ cho snapshot:
                            </label>
                            <input
                                type="text"
                                value={snapshotOption.notes}
                                onChange={(e) =>
                                    setSnapshotOption((prev) => ({
                                        ...prev,
                                        notes: e.target.value,
                                    }))
                                }
                                placeholder={`Th·ªëng k√™ t·ªïng k·∫øt nƒÉm ${snapshotOption.currentYear?.yearName}...`}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    )}
                </div>
            </div>

            <div className="flex flex-col items-center gap-6">
                <button
                    onClick={handleFilter}
                    disabled={filtering}
                    className={`inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white font-semibold rounded-lg shadow-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 ${
                        filtering ? "opacity-60 cursor-not-allowed" : "transform hover:scale-105"
                    }`}
                >
                    {filtering && (
                        <svg
                            className="animate-spin h-5 w-5 text-white"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                        >
                            <circle
                                className="opacity-25"
                                cx="12"
                                cy="12"
                                r="10"
                                stroke="currentColor"
                                strokeWidth="4"
                            ></circle>
                            <path
                                className="opacity-75"
                                fill="currentColor"
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                        </svg>
                    )}
                    <span className="text-lg">{filtering ? "‚è≥ ƒêang x·ª≠ l√Ω..." : "üéØ L·ªçc danh s√°ch tr√∫ng tuy·ªÉn"}</span>
                </button>

                {successMsg && (
                    <div className="bg-green-100 border border-green-400 text-green-700 px-6 py-4 rounded-lg text-center w-full shadow-sm">
                        <div className="whitespace-pre-line">{successMsg}</div>
                    </div>
                )}

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-lg text-center w-full shadow-sm">
                        {error}
                    </div>
                )}

                <div className="text-gray-600 text-center">
                    <p>
                        Nh·∫•n n√∫t <span className="font-semibold text-blue-700">"L·ªçc danh s√°ch tr√∫ng tuy·ªÉn"</span> ƒë·ªÉ h·ªá
                        th·ªëng t·ª± ƒë·ªông x√©t tuy·ªÉn c√°c nguy·ªán v·ªçng theo quy t·∫Øc ∆∞u ti√™n v√† ƒëi·ªÉm chu·∫©n.
                    </p>
                    <p className="mt-2">
                        Sau khi l·ªçc, b·∫°n c√≥ th·ªÉ xem danh s√°ch tr√∫ng tuy·ªÉn t·∫°i m·ª•c{" "}
                        <span className="font-semibold text-blue-700">"Qu·∫£n l√Ω danh s√°ch tr√∫ng tuy·ªÉn"</span>.
                    </p>
                    {snapshotOption.enabled && (
                        <p className="mt-2 text-blue-600">
                            üìä Snapshot th·ªëng k√™ s·∫Ω ƒë∆∞·ª£c t·∫°o ƒë·ªÉ so s√°nh v·ªõi c√°c nƒÉm kh√°c.
                        </p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default FilterPage;
